<?xml version="1.0" encoding="utf-8"?>
<XSF Name="Functions.xsf">

  <Function Name="uuid_generate_v4()" Comment="Генерация уникального идентификатора">
    CREATE OR REPLACE FUNCTION public.uuid_generate_v4()
    RETURNS uuid AS
    $$
    BEGIN
    RETURN md5(random()::TEXT || clock_timestamp()::TEXT)::UUID;
    END;
    $$
    LANGUAGE 'plpgsql'
    VOLATILE
    RETURNS NULL ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="currentuserid()" Comment="Получить идентификатор текущего пользователя">
    CREATE OR REPLACE FUNCTION public.currentuserid()
    RETURNS bigint AS
    $body$
    BEGIN
    RETURN usrs_id FROM _users WHERE usrs_login = CURRENT_USER;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    RETURNS NULL ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>
  
  <Function Name="userphotobyid(id bigint)" Comment="Получить аватар пользователя по его идентификатору">
    CREATE OR REPLACE FUNCTION public.userphotobyid(id bigint)
    RETURNS bytea AS
    $body$
    BEGIN
    RETURN usrs_photo FROM _users WHERE usrs_id = id;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="tablesize(table_name character varying)" Comment="Получить раззмер таблицы по её имени">
    CREATE OR REPLACE FUNCTION public.tablesize(table_name character varying)
    RETURNS character varying AS
    $body$
    BEGIN
    RETURN pg_size_pretty(pg_relation_size(table_name));
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="tablesizefull(table_name character varying)" Comment="Получить полный размер таблицы по её имени">
    CREATE OR REPLACE FUNCTION public.tablesizefull(table_name character varying)
    RETURNS character varying AS
    $body$
    BEGIN
    RETURN pg_size_pretty(pg_total_relation_size(table_name));
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="set_setting_database_active(id bigint)" Comment="Установить активный профиль настроек БД">
    CREATE OR REPLACE FUNCTION public.set_setting_database_active(id bigint)
    RETURNS void AS
    $body$
    BEGIN
    UPDATE _settingsdatabase SET
    sgdb_active = false;
    UPDATE _settingsdatabase SET
    sgdb_active = true
    WHERE sgdb_id = id;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="get_task_status_id_by_uid(status_uid uuid)" Comment="Получить идентификатор статуса задачи по его уникальному идентификатору">
    CREATE OR REPLACE FUNCTION public.get_task_status_id_by_uid(status_uid uuid)
    RETURNS bigint AS
    $body$
    BEGIN
    RETURN tsst_id FROM _taskstatus WHERE tsst_uid = status_uid;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="get_user_setting_value(user_id bigint, setting_uid uuid)" Comment="Получить настройку пользователя">
    CREATE OR REPLACE FUNCTION public.get_user_setting_value(user_id bigint, setting_uid uuid)
    RETURNS varchar AS
    $body$
    BEGIN
    RETURN usst_value
    FROM _usersettings
    WHERE usst_creationuser = user_id
    AND usst_setting = (SELECT stgs_id FROM _settings WHERE stgs_uid = setting_uid);
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;

    ALTER FUNCTION public.get_user_setting_value (user_id bigint, setting_uid uuid)
    OWNER TO postgres;
  </Function>

  <Function Name="check_access_user_subsystem(user_id bigint, user_is_system boolean, subsystem_uid uuid)" Comment="Проверить доступ пользователя к подсистеме">
    CREATE OR REPLACE FUNCTION public.check_access_user_subsystem(user_id bigint, user_is_system boolean, subsystem_uid uuid)
    RETURNS boolean AS
    $body$
    DECLARE
    group_id BIGINT;
    full_access BOOLEAN;
    result BOOLEAN;
    BEGIN

    --Если это системный пользователь - сразу возвращаем true
    IF user_is_system THEN
    RETURN true;
    END IF;

    --Получаем код группы пользователя
    SELECT COALESCE(usrs_group, 0), COALESCE(usgp_fullaccess, NULL)
    INTO group_id, full_access
    FROM _users
    LEFT JOIN _usergroup ON usgp_id = usrs_group
    WHERE usrs_id = user_id;

    --Если у группы этого пользователя полный доступ - сразу возвращаем true
    IF full_access THEN
    RETURN true;
    END IF;

    --Если код группы нулевой - доступ не даём
    IF group_id > 0 THEN
    SELECT (COUNT(*) > 0)::BOOLEAN INTO result
    FROM _groupaccesssubsystem
    WHERE gass_group = group_id
    AND gass_subsystem = subsystem_uid;
    ELSE --Код группы не нулевой - проверяем доступ
    RETURN false;
    END IF;
    RETURN result;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;

    ALTER FUNCTION public.check_access_user_subsystem (user_id bigint, user_is_system boolean, subsystem_uid uuid)
    OWNER TO postgres;
  </Function>

</XSF>