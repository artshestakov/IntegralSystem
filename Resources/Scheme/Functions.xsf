<?xml version="1.0" encoding="utf-8"?>
<XSF Name="Functions.xsf">

  <Function Name="uuid_generate_v4()" Comment="Генерация уникального идентификатора">
    CREATE OR REPLACE FUNCTION public.uuid_generate_v4()
    RETURNS uuid AS
    $$
    BEGIN
    RETURN md5(random()::TEXT || clock_timestamp()::TEXT)::UUID;
    END;
    $$
    LANGUAGE 'plpgsql'
    VOLATILE
    RETURNS NULL ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="currentuserid()" Comment="Получить идентификатор текущего пользователя">
    CREATE OR REPLACE FUNCTION public.currentuserid()
    RETURNS bigint AS
    $body$
    BEGIN
    RETURN usrs_id FROM _users WHERE usrs_login = CURRENT_USER;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    RETURNS NULL ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>
  
  <Function Name="userphotobyid(id bigint)" Comment="Получить аватар пользователя по его идентификатору">
    CREATE OR REPLACE FUNCTION public.userphotobyid(id bigint)
    RETURNS bytea AS
    $body$
    BEGIN
    RETURN usrs_photo FROM _users WHERE usrs_id = id;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="tablesize(table_name character varying)" Comment="Получить раззмер таблицы по её имени">
    CREATE OR REPLACE FUNCTION public.tablesize(table_name character varying)
    RETURNS character varying AS
    $body$
    BEGIN
    RETURN pg_size_pretty(pg_relation_size(table_name));
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="tablesizefull(table_name character varying)" Comment="Получить полный размер таблицы по её имени">
    CREATE OR REPLACE FUNCTION public.tablesizefull(table_name character varying)
    RETURNS character varying AS
    $body$
    BEGIN
    RETURN pg_size_pretty(pg_total_relation_size(table_name));
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="set_setting_database_active(id bigint)" Comment="Установить активный профиль настроек БД">
    CREATE OR REPLACE FUNCTION public.set_setting_database_active(id bigint)
    RETURNS void AS
    $body$
    BEGIN
    UPDATE _settingsdatabase SET
    sgdb_active = false;
    UPDATE _settingsdatabase SET
    sgdb_active = true
    WHERE sgdb_id = id;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="get_task_status_id_by_uid(status_uid uuid)" Comment="Получить идентификатор статуса задачи по его уникальному идентификатору">
    CREATE OR REPLACE FUNCTION public.get_task_status_id_by_uid(status_uid uuid)
    RETURNS bigint AS
    $body$
    BEGIN
    RETURN tsst_id FROM _taskstatus WHERE tsst_uid = status_uid;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

  <Function Name="task_vote(task_id bigint)" Comment="Проголосовать за задачу">
    CREATE OR REPLACE FUNCTION public.task_vote(task_id bigint)
    RETURNS bigint AS
    $body$
    DECLARE
    cnt INTEGER;
    BEGIN
    SELECT INTO cnt COUNT(*) FROM _taskvote WHERE tvot_creationuser = currentuserid() AND tvot_task = task_id;
    CASE WHEN cnt > 0 THEN
    DELETE FROM _taskvote WHERE tvot_creationuser = currentuserid() AND tvot_task = task_id;
    ELSE
    INSERT INTO _taskvote(tvot_task) VALUES(task_id);
    END CASE;
    RETURN COUNT(*) FROM _taskvote WHERE tvot_task = task_id;
    END;
    $body$
    LANGUAGE 'plpgsql'
    VOLATILE
    CALLED ON NULL INPUT
    SECURITY INVOKER
    COST 100;
  </Function>

</XSF>