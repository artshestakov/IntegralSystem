<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="TCPConfigGui" testclass="ConfigTestElement" testname="TCP Sampler Config" enabled="true">
        <stringProp name="TCPSampler.server">127.0.0.1</stringProp>
        <boolProp name="TCPSampler.reUseConnection">true</boolProp>
        <stringProp name="TCPSampler.port">50000</stringProp>
        <boolProp name="TCPSampler.nodelay">false</boolProp>
        <stringProp name="TCPSampler.timeout"></stringProp>
        <stringProp name="TCPSampler.request"></stringProp>
        <boolProp name="TCPSampler.closeConnection">false</boolProp>
        <stringProp name="TCPSampler.EolByte">\0</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Auth_Login" elementType="Argument">
            <stringProp name="Argument.name">Auth_Login</stringProp>
            <stringProp name="Argument.value">postgres</stringProp>
            <stringProp name="Argument.desc">Логин пользователя для авторизации</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Auth_Password" elementType="Argument">
            <stringProp name="Argument.name">Auth_Password</stringProp>
            <stringProp name="Argument.value">adm777</stringProp>
            <stringProp name="Argument.desc">Пароль пользователя для авторизации</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Auth_Version" elementType="Argument">
            <stringProp name="Argument.name">Auth_Version</stringProp>
            <stringProp name="Argument.value">425</stringProp>
            <stringProp name="Argument.desc">Версия клиента</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Sleep_Timeout" elementType="Argument">
            <stringProp name="Argument.name">Sleep_Timeout</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.desc">Таймаут сна (мсек.)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordExist_UserID" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordExist_UserID</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordCreate_UserID" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordCreate_UserID</stringProp>
            <stringProp name="Argument.value">1400501</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordCreate_Login" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordCreate_Login</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordCreate_Password" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordCreate_Password</stringProp>
            <stringProp name="Argument.value">454Trendy_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordEdit_UserID" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordEdit_UserID</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordEdit_Login" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordEdit_Login</stringProp>
            <stringProp name="Argument.value">shestakov</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordEdit_OldPassword" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordEdit_OldPassword</stringProp>
            <stringProp name="Argument.value">~qwPLH34JA961_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordEdit_NewPassword" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordEdit_NewPassword</stringProp>
            <stringProp name="Argument.value">454Trendy!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPasswordReset_UserID" elementType="Argument">
            <stringProp name="Argument.name">UserPasswordReset_UserID</stringProp>
            <stringProp name="Argument.value">1400501</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetRecordCall_RecordID" elementType="Argument">
            <stringProp name="Argument.name">GetRecordCall_RecordID</stringProp>
            <stringProp name="Argument.value">1028</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Код записи разговора из статистики</stringProp>
          </elementProp>
          <elementProp name="RecordAdd_TableName" elementType="Argument">
            <stringProp name="Argument.name">RecordAdd_TableName</stringProp>
            <stringProp name="Argument.value">_UserGroup</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordEdit_TableName" elementType="Argument">
            <stringProp name="Argument.name">RecordEdit_TableName</stringProp>
            <stringProp name="Argument.value">_UserGroup</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordEdit_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">RecordEdit_ObjectID</stringProp>
            <stringProp name="Argument.value">50011</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordDelete_TableName" elementType="Argument">
            <stringProp name="Argument.name">RecordDelete_TableName</stringProp>
            <stringProp name="Argument.value">_UserGroup</stringProp>
            <stringProp name="Argument.desc">Имя таблицы из которой будет происходить удаление</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordGet_TableName" elementType="Argument">
            <stringProp name="Argument.name">RecordGet_TableName</stringProp>
            <stringProp name="Argument.value">Counterparty</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordGet_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">RecordGet_ObjectID</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordGetInfo_TableName" elementType="Argument">
            <stringProp name="Argument.name">RecordGetInfo_TableName</stringProp>
            <stringProp name="Argument.value">_Users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordGetInfo_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">RecordGetInfo_ObjectID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DiscussionAdd_TableName" elementType="Argument">
            <stringProp name="Argument.name">DiscussionAdd_TableName</stringProp>
            <stringProp name="Argument.value">_Users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DiscussionAdd_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">DiscussionAdd_ObjectID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DiscussionAdd_Message" elementType="Argument">
            <stringProp name="Argument.name">DiscussionAdd_Message</stringProp>
            <stringProp name="Argument.value">Hello world!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DiscussionEdit_ID" elementType="Argument">
            <stringProp name="Argument.name">DiscussionEdit_ID</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DiscussionEdit_Message" elementType="Argument">
            <stringProp name="Argument.name">DiscussionEdit_Message</stringProp>
            <stringProp name="Argument.value">123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DiscussionCopy_ID" elementType="Argument">
            <stringProp name="Argument.name">DiscussionCopy_ID</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetTableData_TableName" elementType="Argument">
            <stringProp name="Argument.name">GetTableData_TableName</stringProp>
            <stringProp name="Argument.value">Counterparty</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetTableData_SortingField" elementType="Argument">
            <stringProp name="Argument.name">GetTableData_SortingField</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetTableData_SortingOrder" elementType="Argument">
            <stringProp name="Argument.name">GetTableData_SortingOrder</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetTableQuery_QueryName" elementType="Argument">
            <stringProp name="Argument.name">GetTableQuery_QueryName</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetNoteRecord_TableName" elementType="Argument">
            <stringProp name="Argument.name">GetNoteRecord_TableName</stringProp>
            <stringProp name="Argument.value">_Users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetNoteRecord_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">GetNoteRecord_ObjectID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SetNoteRecord_TableName" elementType="Argument">
            <stringProp name="Argument.name">SetNoteRecord_TableName</stringProp>
            <stringProp name="Argument.value">_Users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SetNoteRecord_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">SetNoteRecord_ObjectID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SetNoteRecord_Note" elementType="Argument">
            <stringProp name="Argument.name">SetNoteRecord_Note</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FileStorageAdd_FileName" elementType="Argument">
            <stringProp name="Argument.name">FileStorageAdd_FileName</stringProp>
            <stringProp name="Argument.value">Задачи.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FileStorageAdd_Data" elementType="Argument">
            <stringProp name="Argument.name">FileStorageAdd_Data</stringProp>
            <stringProp name="Argument.value">yu7kO8fg4+7r7uLu6g0KMTM70uXx8ujw7uLg7ejlDQoyMTvR4v/n4O3t4P9f5+Dk4PfgINHi/+fg7e3g/1/n4OTg9+Ag0eL/5+Dt7eD/X+fg5OD34CDR4v/n4O3t4P9f5+Dk4PfgINHi/+fg7e3g/1/n4OTg9+Ag0eL/5+Dt7eD/X+fg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+Ag5+Dk4PfgIOfg5OD34CDn4OTg9+ANCjIyOzEyMw0KMjM7x+Dk4PfgIOTr/yDy5fHy7uIgx+Dk4PfgIOTr/yDy5fHy7uIgx+Dk4PfgIOTr/yDy5fHy7uIgx+Dk4PfgIOTr/yDy5fHy7uINCjI0O8/u5Ofg5OD34CAyDQo=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FileStorageCopy_ID" elementType="Argument">
            <stringProp name="Argument.name">FileStorageCopy_ID</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FileStorageCopy_Name" elementType="Argument">
            <stringProp name="Argument.name">FileStorageCopy_Name</stringProp>
            <stringProp name="Argument.value">Test6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FileStorageGet_ID" elementType="Argument">
            <stringProp name="Argument.name">FileStorageGet_ID</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchTaskText_Value" elementType="Argument">
            <stringProp name="Argument.name">SearchTaskText_Value</stringProp>
            <stringProp name="Argument.value">тест</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchTaskID_ID" elementType="Argument">
            <stringProp name="Argument.name">SearchTaskID_ID</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchFullText_Value" elementType="Argument">
            <stringProp name="Argument.name">SearchFullText_Value</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CalendarDelete_ID" elementType="Argument">
            <stringProp name="Argument.name">CalendarDelete_ID</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetCalendarEvents_Month" elementType="Argument">
            <stringProp name="Argument.name">GetCalendarEvents_Month</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetCalendarEvents_Year" elementType="Argument">
            <stringProp name="Argument.name">GetCalendarEvents_Year</stringProp>
            <stringProp name="Argument.value">2021</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetGroupRights_GroupID" elementType="Argument">
            <stringProp name="Argument.name">GetGroupRights_GroupID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetRecordValue_TableName" elementType="Argument">
            <stringProp name="Argument.name">GetRecordValue_TableName</stringProp>
            <stringProp name="Argument.value">_Users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetRecordValue_FieldName" elementType="Argument">
            <stringProp name="Argument.name">GetRecordValue_FieldName</stringProp>
            <stringProp name="Argument.value">Hash</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetRecordValue_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">GetRecordValue_ObjectID</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordFavoriteAdd_TableName" elementType="Argument">
            <stringProp name="Argument.name">RecordFavoriteAdd_TableName</stringProp>
            <stringProp name="Argument.value">_Users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordFavoriteAdd_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">RecordFavoriteAdd_ObjectID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordFavoriteDelete_TableName" elementType="Argument">
            <stringProp name="Argument.name">RecordFavoriteDelete_TableName</stringProp>
            <stringProp name="Argument.value">_Users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RecordFavoriteDelete_ObjectID" elementType="Argument">
            <stringProp name="Argument.name">RecordFavoriteDelete_ObjectID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LogGetContent_Year" elementType="Argument">
            <stringProp name="Argument.name">LogGetContent_Year</stringProp>
            <stringProp name="Argument.value">2021</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LogGetContent_Month" elementType="Argument">
            <stringProp name="Argument.name">LogGetContent_Month</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LogGetContent_Day" elementType="Argument">
            <stringProp name="Argument.name">LogGetContent_Day</stringProp>
            <stringProp name="Argument.value">27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CalendarClose_CalendarID" elementType="Argument">
            <stringProp name="Argument.name">CalendarClose_CalendarID</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetForeignList_TableName" elementType="Argument">
            <stringProp name="Argument.name">GetForeignList_TableName</stringProp>
            <stringProp name="Argument.value">_Users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetForeignList_FieldName" elementType="Argument">
            <stringProp name="Argument.name">GetForeignList_FieldName</stringProp>
            <stringProp name="Argument.value">Group</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OrganizationFromINN_INN" elementType="Argument">
            <stringProp name="Argument.name">OrganizationFromINN_INN</stringProp>
            <stringProp name="Argument.value">2634100802</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserDeviceAdd_UserID" elementType="Argument">
            <stringProp name="Argument.name">UserDeviceAdd_UserID</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserDeviceAdd_Vid" elementType="Argument">
            <stringProp name="Argument.name">UserDeviceAdd_Vid</stringProp>
            <stringProp name="Argument.value">13FE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserDeviceAdd_Pid" elementType="Argument">
            <stringProp name="Argument.name">UserDeviceAdd_Pid</stringProp>
            <stringProp name="Argument.value">4300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserDeviceAdd_SN" elementType="Argument">
            <stringProp name="Argument.name">UserDeviceAdd_SN</stringProp>
            <stringProp name="Argument.value">0700039F239C5276</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223: Create query" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import groovy.json.JsonBuilder;
import java.security.MessageDigest;
import java.nio.charset.StandardCharsets;

//Конвертируем контейнер в готовый запрос
String MapToString(def Map)
{
	JsonBuilder Builder = new JsonBuilder(Map);
	String JsonString = Builder.toString() + &apos;\0&apos;;
	return Integer.toString(JsonString.length()) + &apos;.&apos; + JsonString;
};

//Получаем SHA256-хэш строки
String GetSHA256(String string)
{
	MessageDigest Digest = MessageDigest.getInstance(&quot;SHA-256&quot;);
	byte[] HashBytes = Digest.digest(string.getBytes(StandardCharsets.UTF_8));

	StringBuilder string_builder = new StringBuilder();
	for (byte b : HashBytes)
	{
		string_builder.append(String.format(&quot;%02x&quot;, b));
	}
	return string_builder.toString().toUpperCase();
};

//Авторизация
def MapAuth =
[
	Type: &quot;Auth&quot;,
	Parameters:
		[
			Hash: GetSHA256(vars.get(&quot;Auth_Login&quot;) + vars.get(&quot;Auth_Password&quot;)),
			Version: vars.get(&quot;Auth_Version&quot;)
		]
];
vars.put(&quot;QueryAuth&quot;, MapToString(MapAuth));

//Получение мета-данных
def MapGetMetaData =
[
	Type: &quot;GetMetaData&quot;
];
vars.put(&quot;QueryGetMetaData&quot;, MapToString(MapGetMetaData));

//Ожидание
def MapSleep =
[
	Type: &quot;Sleep&quot;,
	Parameters:
		[
			Timeout: vars.get(&quot;Sleep_Timeout&quot;)
		]
];
vars.put(&quot;QuerySleep&quot;, MapToString(MapSleep));

//Получить последнюю версию клиента
def MapGetLastClient =
[
	Type: &quot;GetLastClient&quot;
];
vars.put(&quot;QueryGetLastClient&quot;, MapToString(MapGetLastClient));

//Проверка наличия пароля
def MapUserPasswordExist =
[
	Type: &quot;UserPasswordExist&quot;,
	Parameters:
		[
			UserID: vars.get(&quot;UserPasswordExist_UserID&quot;)
		]
];
vars.put(&quot;QueryUserPasswordExist&quot;, MapToString(MapUserPasswordExist));

//Создание пароля пользователя
def MapUserPasswordCreate =
[
	Type: &quot;UserPasswordCreate&quot;,
	Parameters:
		[
			UserID: vars.get(&quot;UserPasswordCreate_UserID&quot;),
			Hash: GetSHA256(vars.get(&quot;UserPasswordCreate_Login&quot;) + vars.get(&quot;UserPasswordCreate_Password&quot;))
		]
];
vars.put(&quot;QueryUserPasswordCreate&quot;, MapToString(MapUserPasswordCreate));

//Изменение пароля пользователя
def MapUserPasswordEdit =
[
	Type: &quot;UserPasswordEdit&quot;,
	Parameters:
		[
			UserID: vars.get(&quot;UserPasswordEdit_UserID&quot;),
			HashOld: GetSHA256(vars.get(&quot;UserPasswordEdit_Login&quot;) + vars.get(&quot;UserPasswordEdit_OldPassword&quot;)),
			HashNew: GetSHA256(vars.get(&quot;UserPasswordEdit_Login&quot;) + vars.get(&quot;UserPasswordEdit_NewPassword&quot;))
		]
];
vars.put(&quot;QueryUserPasswordEdit&quot;, MapToString(MapUserPasswordEdit));

//Сброс пароля пользователя
def MapUserPasswordReset =
[
	Type: &quot;UserPasswordReset&quot;,
	Parameters:
		[
			UserID: vars.get(&quot;UserPasswordReset_UserID&quot;)
		]
];
vars.put(&quot;QueryUserPasswordReset&quot;, MapToString(MapUserPasswordReset));

//Сброс настроек пользователя
def MapUserSettingsReset =
[
	Type: &quot;UserSettingsReset&quot;
];
vars.put(&quot;QueryUserSettingsReset&quot;, MapToString(MapUserSettingsReset));

//Привязка устройства к учётной записи пользователя
def MapUserDeviceAdd =
[
	Type: &quot;UserDeviceAdd&quot;,
	Parameters:
		[
			UserID: vars.get(&quot;UserDeviceAdd_UserID&quot;),
			Hash: GetSHA256(vars.get(&quot;UserDeviceAdd_Vid&quot;) + vars.get(&quot;UserDeviceAdd_Pid&quot;) + vars.get(&quot;UserDeviceAdd_SN&quot;))
		]
];
vars.put(&quot;QueryUserDeviceAdd&quot;, MapToString(MapUserDeviceAdd));

//Получение записи разговора
def MapGetRecordCall =
[
	Type: &quot;GetRecordCall&quot;,
	Parameters:
		[
			RecordID: vars.get(&quot;GetRecordCall_RecordID&quot;)
		]
];
vars.put(&quot;QueryGetRecordCall&quot;, MapToString(MapGetRecordCall));

//Получение всех клиентов в сети
def MapGetClients =
[
	Type: &quot;GetClients&quot;
];
vars.put(&quot;QueryGetClients&quot;, MapToString(MapGetClients));

//Добавление записи
def MapRecordAdd =
[
	Type: &quot;RecordAdd&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;RecordAdd_TableName&quot;),
			Values:
				[
					Name: &quot;testing1&quot;
				]
		]
];
vars.put(&quot;QueryRecordAdd&quot;, MapToString(MapRecordAdd));

//Изменение записи
def MapRecordEdit =
[
	Type: &quot;RecordEdit&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;RecordEdit_TableName&quot;),
			ObjectID: vars.get(&quot;RecordEdit_ObjectID&quot;),
			Values:
				[
					Name: &quot;testing15&quot;
				]
		]
];
vars.put(&quot;QueryRecordEdit&quot;, MapToString(MapRecordEdit));

//Удаление записи
def MapRecordDelete =
[
	Type: &quot;RecordDelete&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;RecordDelete_TableName&quot;),
			Objects: [25]
		]
];
vars.put(&quot;QueryRecordDelete&quot;, MapToString(MapRecordDelete));

//Получить запись
def MapRecordGet =
[
	Type: &quot;RecordGet&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;RecordGet_TableName&quot;),
			ObjectID: vars.get(&quot;RecordGet_ObjectID&quot;)
		]
];
vars.put(&quot;QueryRecordGet&quot;, MapToString(MapRecordGet));

//Получить информацию о записи
def MapRecordGetInfo =
[
	Type: &quot;RecordGetInfo&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;RecordGetInfo_TableName&quot;),
			ObjectID: vars.get(&quot;RecordGetInfo_ObjectID&quot;)
		]
];
vars.put(&quot;QueryRecordGetInfo&quot;, MapToString(MapRecordGetInfo));

//Добавить обсуждение
def MapDiscussionAdd =
[
	Type: &quot;DiscussionAdd&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;DiscussionAdd_TableName&quot;),
			ObjectID: vars.get(&quot;DiscussionAdd_ObjectID&quot;),
			Message: vars.get(&quot;DiscussionAdd_Message&quot;)
		]
];
vars.put(&quot;QueryDiscussionAdd&quot;, MapToString(MapDiscussionAdd));

//Изменить обсуждение
def MapDiscussionEdit =
[
	Type: &quot;DiscussionEdit&quot;,
	Parameters:
		[
			ID: vars.get(&quot;DiscussionEdit_ID&quot;),
			Message: vars.get(&quot;DiscussionEdit_Message&quot;)
		]
];
vars.put(&quot;QueryDiscussionEdit&quot;, MapToString(MapDiscussionEdit));

//Скопировать обсуждение
def MapDiscussionCopy =
[
	Type: &quot;DiscussionCopy&quot;,
	Parameters:
		[
			ID: vars.get(&quot;DiscussionCopy_ID&quot;)
		]
];
vars.put(&quot;QueryDiscussionCopy&quot;, MapToString(MapDiscussionCopy));

//Получить данные таблицы
def MapGetTableData =
[
	Type: &quot;GetTableData&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;GetTableData_TableName&quot;),
			SortingField: vars.get(&quot;GetTableData_SortingField&quot;),
			SortingOrder: vars.get(&quot;GetTableData_SortingOrder&quot;)
		]
];
vars.put(&quot;QueryGetTableData&quot;, MapToString(MapGetTableData));

//Получить данные запроса
def MapGetTableQuery =
[
	Type: &quot;GetTableQuery&quot;,
	Parameters:
		[
			QueryName: vars.get(&quot;GetTableQuery_QueryName&quot;),
			Parameters:
				[

				]
		]
];
vars.put(&quot;QueryGetTableQuery&quot;, MapToString(MapGetTableQuery));

//Получить примечание записи
def MapGetNoteRecord =
[
	Type: &quot;GetNoteRecord&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;GetNoteRecord_TableName&quot;),
			ObjectID: vars.get(&quot;GetNoteRecord_ObjectID&quot;)
		]
];
vars.put(&quot;QueryGetNoteRecord&quot;, MapToString(MapGetNoteRecord));

//Изменить примечание записи
def MapSetNoteRecord =
[
	Type: &quot;SetNoteRecord&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;SetNoteRecord_TableName&quot;),
			ObjectID: vars.get(&quot;SetNoteRecord_ObjectID&quot;),
			Note: vars.get(&quot;SetNoteRecord_Note&quot;)
		]
];
vars.put(&quot;QuerySetNoteRecord&quot;, MapToString(MapSetNoteRecord));

//Добавить файл в хранилище
def MapFileStorageAdd =
[
	Type: &quot;FileStorageAdd&quot;,
	Parameters:
		[
			FileName: vars.get(&quot;FileStorageAdd_FileName&quot;),
			Data: vars.get(&quot;FileStorageAdd_Data&quot;)
		]
];
vars.put(&quot;QueryFileStorageAdd&quot;, MapToString(MapFileStorageAdd));

//Скопировать файл в хранилище
def MapFileStorageCopy =
[
	Type: &quot;FileStorageCopy&quot;,
	Parameters:
		[
			ID: vars.get(&quot;FileStorageCopy_ID&quot;),
			Name: vars.get(&quot;FileStorageCopy_Name&quot;)
		]
];
vars.put(&quot;QueryFileStorageCopy&quot;, MapToString(MapFileStorageCopy));

//Получить файл из хранилища
def MapFileStorageGet =
[
	Type: &quot;FileStorageGet&quot;,
	Parameters:
		[
			ID: vars.get(&quot;FileStorageGet_ID&quot;)
		]
];
vars.put(&quot;QueryFileStorageGet&quot;, MapToString(MapFileStorageGet));

//Поиск задачи по тексту
def MapSearchTaskText =
[
	Type: &quot;SearchTaskText&quot;,
	Parameters:
		[
			Value: vars.get(&quot;SearchTaskText_Value&quot;)
		]
];
vars.put(&quot;QuerySearchTaskText&quot;, MapToString(MapSearchTaskText));

//Поиск задачи по номеру
def MapSearchTaskID =
[
	Type: &quot;SearchTaskID&quot;,
	Parameters:
		[
			ID: vars.get(&quot;SearchTaskID_ID&quot;)
		]
];
vars.put(&quot;QuerySearchTaskID&quot;, MapToString(MapSearchTaskID));

//Поиск задачи по номеру
def MapSearchFullText =
[
	Type: &quot;SearchFullText&quot;,
	Parameters:
		[
			Value: vars.get(&quot;SearchFullText_Value&quot;)
		]
];
vars.put(&quot;QuerySearchFullText&quot;, MapToString(MapSearchFullText));

//Получение событий календаря
def MapGetCalendarEvents =
[
	Type: &quot;GetCalendarEvents&quot;,
	Parameters:
		[
			Month: vars.get(&quot;GetCalendarEvents_Month&quot;),
			Year: vars.get(&quot;GetCalendarEvents_Year&quot;)
		]
];
vars.put(&quot;QueryGetCalendarEvents&quot;, MapToString(MapGetCalendarEvents));

//Удаление события календаря
def MapCalendarDelete =
[
	Type: &quot;CalendarDelete&quot;,
	Parameters:
		[
			ID: vars.get(&quot;CalendarDelete_ID&quot;)
		]
];
vars.put(&quot;QueryCalendarDelete&quot;, MapToString(MapCalendarDelete));

//Получить список внутренних справочников
def MapGetInternalLists =
[
	Type: &quot;GetInternalLists&quot;
];
vars.put(&quot;QueryGetInternalLists&quot;, MapToString(MapGetInternalLists));

//Получить права доступа группы
def MapGetGroupRights =
[
	Type: &quot;GetGroupRights&quot;,
	Parameters:
		[
			GroupID: vars.get(&quot;GetGroupRights_GroupID&quot;)
		]
];
vars.put(&quot;QueryGetGroupRights&quot;, MapToString(MapGetGroupRights));

//Получить значение поля записи
def MapGetRecordValue =
[
	Type: &quot;GetRecordValue&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;GetRecordValue_TableName&quot;),
			FieldName: vars.get(&quot;GetRecordValue_FieldName&quot;),
			ObjectID: vars.get(&quot;GetRecordValue_ObjectID&quot;)
		]
];
vars.put(&quot;QueryGetRecordValue&quot;, MapToString(MapGetRecordValue));

//Добавить запись в избранное
def MapRecordFavoriteAdd =
[
	Type: &quot;RecordFavoriteAdd&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;RecordFavoriteAdd_TableName&quot;),
			ObjectID: vars.get(&quot;RecordFavoriteAdd_ObjectID&quot;)
		]
];
vars.put(&quot;QueryRecordFavoriteAdd&quot;, MapToString(MapRecordFavoriteAdd));

//Удалить запись из избранного
def MapRecordFavoriteDelete =
[
	Type: &quot;RecordFavoriteDelete&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;RecordFavoriteDelete_TableName&quot;),
			ObjectID: vars.get(&quot;RecordFavoriteDelete_ObjectID&quot;)
		]
];
vars.put(&quot;QueryRecordFavoriteDelete&quot;, MapToString(MapRecordFavoriteDelete));

//Получаем имена избранных записей
def MapGetFavoriteNames =
[
	Type: &quot;GetFavoriteNames&quot;,
];
vars.put(&quot;QueryGetFavoriteNames&quot;, MapToString(MapGetFavoriteNames));

//Удалить избранные записи у пользователя
def MapFavoritesDelete =
[
	Type: &quot;FavoritesDelete&quot;
];
vars.put(&quot;QueryFavoritesDelete&quot;, MapToString(MapFavoritesDelete));

//Закрытие события календаря
def MapCalendarClose =
[
	Type: &quot;CalendarClose&quot;,
	Parameters:
		[
			CalendarID: vars.get(&quot;CalendarClose_CalendarID&quot;)
		]
];
vars.put(&quot;QueryCalendarClose&quot;, MapToString(MapCalendarClose));

//Получить значения справочника для поля
def MapGetForeignList =
[
	Type: &quot;GetForeignList&quot;,
	Parameters:
		[
			TableName: vars.get(&quot;GetForeignList_TableName&quot;),
			FieldName: vars.get(&quot;GetForeignList_FieldName&quot;)
		]
];
vars.put(&quot;QueryGetForeignList&quot;, MapToString(MapGetForeignList));

//Получить структуру лог-файлов
def MapLogGetStructure =
[
	Type: &quot;LogGetStructure&quot;
];
vars.put(&quot;QueryLogGetStructure&quot;, MapToString(MapLogGetStructure));

//Получить содержимое лог-файла
def MapLogGetContent =
[
	Type: &quot;LogGetContent&quot;,
	Parameters:
		[
			Year: vars.get(&quot;LogGetContent_Year&quot;),
			Month: vars.get(&quot;LogGetContent_Month&quot;),
			Day: vars.get(&quot;LogGetContent_Day&quot;)
		]
];
vars.put(&quot;QueryLogGetContent&quot;, MapToString(MapLogGetContent));

//Получить значения справочника для поля
def MapGetServerInfo =
[
	Type: &quot;GetServerInfo&quot;
];
vars.put(&quot;QueryGetServerInfo&quot;, MapToString(MapGetServerInfo));

//Получить организацию по ИНН
def MapOrganizationFromINN =
[
	Type: &quot;OrganizationFromINN&quot;,
	Parameters:
		[
			INN: vars.get(&quot;OrganizationFromINN_INN&quot;)
		]
];
vars.put(&quot;QueryOrganizationFromINN&quot;, MapToString(MapOrganizationFromINN));</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: Auth" enabled="true">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryAuth}</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetMetaData" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetMetaData}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetClients" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetClients}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetInternalLists" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetInternalLists}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: RecordAdd" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryRecordAdd}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: RecordEdit" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryRecordEdit}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: RecordDelete" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryRecordDelete}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: RecordGet" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryRecordGet}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: RecordGetInfo" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryRecordGetInfo}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: DiscussionAdd" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryDiscussionAdd}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: DiscussionEdit" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryDiscussionEdit}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: DiscussionCopy" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryDiscussionCopy}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetRecordCall" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetRecordCall}</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: UserPasswordExist" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryUserPasswordExist}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: UserPasswordReset" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryUserPasswordReset}</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: UserPasswordCreate" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryUserPasswordCreate}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: UserPasswordEdit" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryUserPasswordEdit}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: UserSettingsReset" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryUserSettingsReset}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: UserDeviceAdd" enabled="true">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryUserDeviceAdd}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetTableData" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetTableData}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetTableQuery" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetTableQuery}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetLastClient" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetLastClient}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: Sleep" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QuerySleep}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetNoteRecord" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetNoteRecord}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: SetNoteRecord" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QuerySetNoteRecord}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: FileStorageAdd" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryFileStorageAdd}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: FileStorageCopy" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryFileStorageCopy}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: FileStorageGet" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryFileStorageGet}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: SearchTaskText" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QuerySearchTaskText}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: SearchTaskID" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QuerySearchTaskID}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: SearchFullText" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QuerySearchFullText}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetCalendarEvents" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetCalendarEvents}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: CalendarDelete" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryCalendarDelete}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetGroupRights" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetGroupRights}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetRecordValue" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetRecordValue}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: RecordFavoriteAdd" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryRecordFavoriteAdd}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: RecordFavoriteDelete" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryRecordFavoriteDelete}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetFavoriteNames" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetFavoriteNames}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: FavoritesDelete" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryFavoritesDelete}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: CalendarClose" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryCalendarClose}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: LogGetStructure" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryLogGetStructure}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: LogGetContent" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryLogGetContent}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetForeignList" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetForeignList}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: GetServerInfo" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryGetServerInfo}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: OrganizationFromINN" enabled="false">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${QueryOrganizationFromINN}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group: Shutdown" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler: Shutdown" enabled="true">
          <stringProp name="TCPSampler.server">127.0.0.1</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">50001</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">shutdown</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="TCPSampler.EolByte">10</stringProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
